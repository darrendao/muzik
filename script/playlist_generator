#!/usr/bin/env ruby

require 'rubygems'
#require 'facter'
require 'optparse'
require 'rest-client'
require 'json'
require 'time'
require 'date'

class Playlist
  attr_accessor :entries
  def initialize(entries = [])
    @entries = entries
  end
  def songs_in_interval(start_time, end_time)
    songs = []
    @entries.each do |song|
      songs << song if start_time <= song['timestamp'] && song['timestamp'] <= end_time
    end
    songs
  end
  def songs_in_hour(hour)
    start_time = hour*60*60
    end_time = (hour + 1)*60*60
    songs_in_interval(start_time, end_time)
  end
end

class PlaylistGenerator
  def initialize(options)
    @energy_levels = options[:energy_levels]
    @energy_level_intervals = options[:energy_level_intervals] || {}
    @schedules = options[:schedules] || {}
    @holiday_song_period = options[:holiday_song_period] || 5

    # Update intervals to be in seconds to make it easier to calculate later on
    @energy_level_intervals.values.flatten.each do |eli|
      start_at =  Time.parse(eli['start_at'])
      end_at =  Time.parse(eli['end_at'])
      start_at = start_at.hour * 60 * 60 + start_at.min * 60 + start_at.sec
      end_at = end_at.hour * 60 * 60 + end_at.min * 60 + end_at.sec
      eli['start_at'] = start_at
      eli['end_at'] = end_at
    end
  end

  # time is seconds since midnight
  def energy_level_at(date, time)
    energy_level = nil
    @energy_level_intervals[date.to_s].each do |eli|
      next if eli['wday'] != date.wday
      if eli['start_at'] <= time and time <= eli['end_at']
        energy_level = eli['energy_level_id']
        break
      end
    end
    energy_level
  end

  # Given the energy_level_id, figure out what is its holiday
  # counter-part. This method assumes the regular energy levels are named E1, E2, etc. and the holiday energy levels
  # are named H1, H2, etc
  def holidayize_energy_level(energy_level_id)
    energy_level_name = nil
    @energy_levels.each do |energy_level|
      if energy_level['id'] == energy_level_id
        energy_level_name = energy_level['name']
        break
      end
    end

    # Can't do anythign if we can't find the specified energy level
    return nil unless energy_level_name

    # parse the name to get the numerical value
    # Can't do anything if the name isn't of the correct standard
    return nil if energy_level_name !~ /E(\d+)/

    holiday_energy_level_name = "H#{$1}"
    @energy_levels.each do |energy_level|
      return energy_level['id'] if energy_level['name'] == holiday_energy_level_name
    end

    # can't find the corresponding holiday energy level
    return nil
  end

  def generate(songs, previous_playlist, date, start_time=0, end_time = 86400)
    songs.shuffle!
    playlist = Playlist.new
    songs_counter = songs.size
    current_time = start_time              # seconds since midnight
    current_hour = start_time / (60*60)    # hours since midnight
    current_hour_songs = [] # list of songs that had been play for this hour
    current_time_energy_level = energy_level_at(date, current_time)

    schedule = @schedules[date.to_s]

    if schedule.nil?
      raise "Trying to generate playlist for #{date} but unable to figure out what schedule to use."
    end

    while candidate = songs.shift
      #puts "Current energy level is #{current_time_energy_level.inspect}"
      songs_counter = songs_counter - 1
      if songs_counter < 0
        puts "OH NO... ran out of songs"
        return playlist
      end


      # Don't play songs of the same artist or album that have been played during the last hour
      if current_hour_songs.any?{|song| song['artist'] == candidate['artist'] or song['album'] == candidate['album']}
        # puts "Skipping #{candidate.inspect} because of artist or album conflict"
        songs.push(candidate)
        next
      end

      # Don't play songs that don't match the energy level
      # If no energy level specified for current time, then we don't care
      song_energy_level = candidate['energy_level_id']
      if current_time_energy_level && current_time_energy_level != song_energy_level
        # puts "Skipping #{candidate.inspect} because of energy level conflict. Song energy level is #{song_energy_level}"
        songs.push(candidate)
        next
      end

      # check that song wasn't used in the same hour yesterday
      if previous_playlist
        songs_to_avoid = previous_playlist.songs_in_hour(current_hour)
        if songs_to_avoid.any?{|s| s['file_path'] == candidate['file_path']}
          songs.push(candidate)
          next
        end
      end

      # All conditions meet. Add song to playlist
      playlist_entry = candidate.clone
      playlist_entry['timestamp'] = current_time.to_i
      playlist.entries << playlist_entry
      current_time += candidate['duration']
      songs_counter = songs.size

      puts "add #{playlist_entry['title']} -- #{playlist_entry['energy_level']} -- playlistsize #{playlist.entries.size}"

      # See if at the end of this song, we're in a new hour. If so, then re-initialize things
      new_hour = current_time / (60*60)
      if new_hour > current_hour
        current_hour_songs = []
        current_time_energy_level = energy_level_at(date, current_time)
        current_hour = new_hour
      end
      current_hour_songs << candidate

      # If this is during a holiday, then play holiday song if it's time to do so
      if schedule['is_holiday']
        if (playlist.entries.size % @holiday_song_period == 0)
          current_time_energy_level = holidayize_energy_level(current_time_energy_level)
        # Revert back to normal energy level
        elsif (playlist.entries.size % @holiday_song_period == 1)
          current_time_energy_level = energy_level_at(date, current_time)
        end
      end

      puts "current energy level is now #{current_time_energy_level.inspect}"

      # See if we're done
      if current_time >= end_time
        break
      end
    end
    return playlist
  end
end

def get_serial
  Facter.loadfacts
  if Facter['serialnumber']
    return Facter['serialnumber'].value
  else
    return nil
  end
end

def playlist_on(playlist_file, target_date)
  playlist = JSON.parse(File.read(playlist_file))
  playlist.each do |date, value|
    return Playlist.new(value) if Date.parse(date) == target_date
  end
  nil
end

def save_playlist(playlist, outfile)
  puts "Writing playlist to #{outfile}"
  File.open(outfile, 'w') do |f|
    f.write(playlist.to_json)
  end
end

def save_playlist_epoch(playlist, outfile)
  puts "Converting to epoch. Saving to #{outfile}"
  result = []
  playlist.each do |date, songs|
    songs.each do |song|
      epoch_time = Time.parse(date.to_s).to_i + song['timestamp']
      song['timestamp'] = epoch_time
      result << song
    end
  end

  File.open(outfile, 'w') {|f| f.write(result.to_json)}
end

options = {}
opts = OptionParser.new
opts.banner="Usage: playlist_generator [options]"
opts.on('--playlist_dir DIR', 'Where playlists are stored') do |opt|
  options[:playlist_dir] = opt
end
opts.on('--song_dir DIR', 'Where songs are stored') do |opt|
  options[:song_dir] = opt
end
opts.on('--days NUMBER', Integer, 'How many days to generate playlists for') do |opt|
  options[:days] = opt
end
opts.on('--server URL', 'URL for where the server is running') do |opt|
  options[:server_url] = opt
end
opts.on('--serial STRING', 'Explicitly specify the serial number of the client to generate playlist for') do |opt|
  options[:serial] = opt
end
opts.on_tail('--help') do
  puts opts
  exit
end
opts.parse(ARGV)

server_url = options[:server_url] || "http://50.56.218.230"
serial = options[:serial] || get_serial
playlist_dir = options[:playlist_dir] || "."
playlist_file = File.join(playlist_dir, 'playlist.json.old_format')
epoch_playlist_file = File.join(playlist_dir, 'playlist.json')
start_date = Date.today
days = options[:days] || 1
end_date = start_date + days - 1

if serial.nil?
  raise "Unable to determine serial number"
end

# Get location info
response = RestClient.get File.join(server_url, "media_players/location_info.json"), {:params => {:serial => serial}}
location = JSON.parse(response.body)['location']
location_id = location['id']
holiday_song_period = location['holiday_song_period']

# Get energy levels
response = RestClient.get File.join(server_url, "energy_levels.json")
energy_levels = JSON.parse(response.body)

# Get energy level intervals
response = RestClient.get File.join(server_url, "locations/energy_level_intervals.json"),
                                    {:params => {:location_id => location_id,
                                                 :start_date => start_date, :end_date => end_date}}
energy_level_intervals = JSON.parse(response.body)

# Get schedule info
response = RestClient.get File.join(server_url, "locations/schedules.json"),
                                    {:params => {:location_id => location_id,
                                                 :start_date => start_date, :end_date => end_date}}
schedules = JSON.parse(response.body)

# Get songs library
response = RestClient.get File.join(server_url, "media_players/songs_library.json"), {:params => {:serial => serial}}
songs = JSON.parse(response.body)

# Get blacklisted songs
response = RestClient.get File.join(server_url, "media_players/blacklisted_songs.json"), {:params => {:serial => serial}}
blacklisted_songs = JSON.parse(response.body)
blacklisted_song_ids = blacklisted_songs.collect{|song| song['id']}

# Remove songs that have been blacklisted or songs that we don't have on filesystem
tmp_songs_list = []
songs.each do |song|
  if blacklisted_song_ids.include?(song['id'])
    next
  end
  tmp_songs_list << song
end
songs = tmp_songs_list

result = {}

yesterday = Date.today - 1
if File.exists?(playlist_file)
  previous_playlist = playlist_on(playlist_file, yesterday)
  result[yesterday] = previous_playlist.entries if previous_playlist
else
  previous_playlist = nil
end

# Start generating playlist
generator = PlaylistGenerator.new(:energy_level_intervals => energy_level_intervals,
                                  :energy_levels => energy_levels,
                                  :schedules => schedules,
                                  :holiday_song_period => holiday_song_period)
(start_date..end_date).each do |date|
  playlist = generator.generate(songs.clone, previous_playlist, date)
  result[date] = playlist.entries if playlist
  previous_playlist = playlist
end

if result
  save_playlist(result, playlist_file)
  save_playlist_epoch(result, epoch_playlist_file)
end
